
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: encryptionconfigs.scale.spectrum.ibm.com
spec:
  group: scale.spectrum.ibm.com
  names:
    kind: EncryptionConfig
    listKind: EncryptionConfigList
    plural: encryptionconfigs
    shortNames:
    - ec
    singular: encryptionconfig
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec defines the desired state of EncryptionConfig
            properties:
              cacert:
                description: The ConfigMap storing CA and endpoint certificates used
                  while adding/renewing key server certificate chain.
                type: string
              client:
                description: The key client to communicate with the key Server.
                maxLength: 16
                type: string
              filesystems:
                description: If specified, a list of filesystems to be encrypted.
                items:
                  properties:
                    algorithm:
                      default: DEFAULTNISTSP800131A
                      description: The algorithm to be used for encryption. Valid
                        values are `DEFAULTNISTSP800131AFAST` and `DEFAULTNISTSP800131A`.
                      enum:
                      - DEFAULTNISTSP800131A
                      - DEFAULTNISTSP800131AFAST
                      type: string
                    name:
                      description: The name of the filesystem.
                      type: string
                  required:
                  - name
                  type: object
                type: array
              port:
                default: 9443
                description: It can be used to override the default port for the key
                  server.
                type: integer
              remoteRKM:
                description: The RKM ID from the remote cluster corresponding to given
                  key server and tenant.
                maxLength: 21
                type: string
              secret:
                description: The name of the basic-auth secret containing the username
                  and password to the key server.
                type: string
              server:
                description: The key server name to communicate for encryption configuration.
                type: string
              tenant:
                description: 'The default tenant name to the key server. This name
                  can consist of any alphanumeric characters and only these non-alphanumeric
                  characters: ''_''.'
                maxLength: 16
                type: string
            required:
            - client
            - secret
            - server
            - tenant
            type: object
          status:
            description: status defines the observed state of EncryptionConfig
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
